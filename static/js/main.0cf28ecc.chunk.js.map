{"version":3,"sources":["utils/utilities.ts","components/SimpleScatterChart/index.tsx","components/CurrencySelect/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["baseUrl","getCurrencies","a","axios","get","currenciesResponse","data","Error","getLatestRate","fromCurrency","toCurrency","lastestResponse","getPastThirtyDaysRate","dateToday","moment","format","dateThirtyDaysBefore","subtract","pastThirtyDaysRateResponse","SimpleScatterChart","chartData","length","xType","width","height","margin","left","right","top","bottom","title","tickLabelAngle","tickFormat","tick","strokeWidth","Option","Select","CurrencySelect","selectedCurrency","currencies","setCurrency","style","defaultValue","onChange","value","map","currency","index","Header","Layout","Content","Title","Typography","Paragraph","App","useState","currencyList","setCurrencyList","setFromCurrency","setToCurrency","rate","setRate","rateMedian","setRateMedian","isBuy","setIsBuy","setChartData","useEffect","then","Object","keys","catch","errorMessage","message","showErrorMessage","rates","entries","key","x","Date","y","ratesArray","values","sort","middleArray","Math","floor","toFixed","getMedianFromTimeSeries","error","className","color","textAlign","padding","display","justifyContent","direction","align","defaultChecked","checkedChildren","unCheckedChildren","isPrevIsBuy","marginBottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cf28ecc.chunk.js","sourcesContent":["import axios from \"axios\";\nimport moment from \"moment\";\nimport { LatestResponse, Rates, TimeSeriesResponse } from \"./interface\";\n\nexport const baseUrl = \"https://api.frankfurter.app\";\n\nexport const getCurrencies = async (): Promise<Record<string, string>> => {\n  try {\n    const currenciesResponse = await axios.get(`${baseUrl}/currencies`);\n    return currenciesResponse.data;\n  } catch (e) {\n    throw new Error(\"Cannot get currencies\");\n  }\n};\nexport const getLatestRate = async (\n  fromCurrency: string,\n  toCurrency: string\n): Promise<LatestResponse> => {\n  try {\n    const lastestResponse = await axios.get<LatestResponse>(\n      `${baseUrl}/latest?from=${fromCurrency}&to=${toCurrency}`\n    );\n    return lastestResponse.data;\n  } catch (error) {\n    throw new Error(\"Cannot get latest rate\");\n  }\n};\n\nexport const getPastThirtyDaysRate = async (\n  fromCurrency: string,\n  toCurrency: string\n): Promise<TimeSeriesResponse> => {\n  try {\n    const dateToday = moment().format(\"yyyy-MM-DD\");\n    const dateThirtyDaysBefore = moment()\n      .subtract(30, \"days\")\n      .format(\"yyyy-MM-DD\");\n    const pastThirtyDaysRateResponse = await axios.get(\n      `${baseUrl}/${dateThirtyDaysBefore}..${dateToday}?from=${fromCurrency}&to=${toCurrency}`\n    );\n    return pastThirtyDaysRateResponse.data;\n  } catch (error) {\n    throw new Error(\"Cannot get past 30 days rate\");\n  }\n};\n\nexport const getMedianFromTimeSeries = (\n  toCurrency: string,\n  rates: Record<string, Rates>\n): number => {\n  let medianRate: number = 0;\n  const ratesArray = Object.values(rates)\n    .map((rate) => rate[toCurrency])\n    .sort();\n  const middleArray = Math.floor(ratesArray.length / 2);\n  if (middleArray % 2 === 0) {\n    medianRate = (ratesArray[middleArray - 1] + ratesArray[middleArray]) / 2;\n  } else {\n    medianRate = ratesArray[middleArray];\n  }\n  return +medianRate.toFixed(4);\n};\n","import React from \"react\";\nimport moment from \"moment\";\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  MarkSeries,\n} from \"react-vis\";\nimport \"react-vis/dist/style.css\";\n\nexport interface ChartData {\n  x: Date;\n  y: number;\n}\nexport interface SimpleScatterChartProps {\n  chartData: ChartData[];\n}\n\nconst SimpleScatterChart = ({ chartData }: SimpleScatterChartProps) =>\n  chartData.length ? (\n    <XYPlot\n      xType=\"time\"\n      width={1000}\n      height={500}\n      margin={{ left: 60, right: 10, top: 10, bottom: 100 }}\n    >\n      <VerticalGridLines />\n      <HorizontalGridLines />\n      <XAxis\n        title=\"Date\"\n        tickLabelAngle={-45}\n        tickFormat={(tick) => moment(tick).format(\"DD-MM-YYYY\")}\n      />\n      <YAxis title=\"Rate\" tickLabelAngle={-45} />\n      <MarkSeries data={chartData} strokeWidth={2} />\n    </XYPlot>\n  ) : (\n    <></>\n  );\n\nexport default SimpleScatterChart;\n","import React from \"react\";\nimport { Select } from \"antd\";\n\nconst { Option } = Select;\n\nexport interface CurrencySelectProps {\n  selectedCurrency: string;\n  currencies: string[];\n  setCurrency: (currency: string) => void;\n}\n\nconst CurrencySelect = ({\n  selectedCurrency,\n  currencies,\n  setCurrency,\n}: CurrencySelectProps) => (\n  <Select\n    style={{ margin: 10 }}\n    defaultValue={selectedCurrency}\n    onChange={(value) => {\n      setCurrency(value);\n    }}\n  >\n    {currencies.map((currency: string, index: number) => (\n      <Option key={`${index}_${currency}`} value={currency}>\n        {currency}\n      </Option>\n    ))}\n  </Select>\n);\n\nexport default CurrencySelect;\n","import React, { useState, useEffect } from \"react\";\nimport { Layout, message, Space, Switch, Typography } from \"antd\";\nimport {\n  getCurrencies,\n  getLatestRate,\n  getPastThirtyDaysRate,\n  getMedianFromTimeSeries,\n} from \"./utils/utilities\";\nimport SimpleScatterChart, { ChartData } from \"./components/SimpleScatterChart\";\nimport CurrencySelect from \"./components/CurrencySelect\";\nimport \"antd/dist/antd.css\";\nimport \"./App.scss\";\n\nconst { Header, Content } = Layout;\nconst { Title, Paragraph } = Typography;\n\nconst App = () => {\n  const [currencyList, setCurrencyList] = useState<string[]>([]);\n  const [fromCurrency, setFromCurrency] = useState<string>(\"CAD\");\n  const [toCurrency, setToCurrency] = useState<string>(\"USD\");\n  const [rate, setRate] = useState<number>(0);\n  const [rateMedian, setRateMedian] = useState<number>(0);\n  const [isBuy, setIsBuy] = useState<boolean>(true);\n  const [chartData, setChartData] = useState<ChartData[]>([]);\n\n  useEffect(() => {\n    getCurrencies()\n      .then((data) => {\n        setCurrencyList(Object.keys(data));\n      })\n      .catch(({ message: errorMessage }) => {\n        showErrorMessage(errorMessage);\n      });\n  }, []);\n\n  useEffect(() => {\n    getLatestRate(fromCurrency, toCurrency)\n      .then((data) => {\n        setRate(data.rates[toCurrency]);\n      })\n      .catch(({ message: errorMessage }) => {\n        showErrorMessage(errorMessage);\n      });\n\n    getPastThirtyDaysRate(fromCurrency, toCurrency)\n      .then((data) => {\n        setChartData(\n          Object.entries(data.rates).map(([key, value]) => ({\n            x: new Date(key),\n            y: value[toCurrency],\n          }))\n        );\n        setRateMedian(getMedianFromTimeSeries(toCurrency, data.rates));\n      })\n      .catch(({ message: errorMessage }) => {\n        showErrorMessage(errorMessage);\n      });\n  }, [fromCurrency, toCurrency]);\n\n  const showErrorMessage = (errorMessage: string) => {\n    message.error(errorMessage);\n  };\n\n  const buySellToggleChange = () => {\n    setIsBuy((isPrevIsBuy) => !isPrevIsBuy);\n  };\n\n  const goodOrNot = () => {\n    if (rate === rateMedian) {\n      return \"not good\";\n    } else if (rate < rateMedian) {\n      return isBuy ? \"good\" : \"not good\";\n    } else {\n      return isBuy ? \"not good\" : \"good\";\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Header>\n          <Title style={{ color: \"#FFFFFF\", textAlign: \"center\" }}>\n            Currency Conversion App\n          </Title>\n        </Header>\n        <Content\n          style={{ padding: 10, display: \"flex\", justifyContent: \"center\" }}\n        >\n          <Space direction=\"vertical\" align=\"center\">\n            <Paragraph>\n              1\n              <CurrencySelect\n                selectedCurrency={fromCurrency}\n                currencies={currencyList}\n                setCurrency={setFromCurrency}\n              />\n              is {rate}\n              <CurrencySelect\n                selectedCurrency={toCurrency}\n                currencies={currencyList}\n                setCurrency={setToCurrency}\n              />\n            </Paragraph>\n            <Paragraph>\n              The rate median of {fromCurrency} to {toCurrency} for the last 30\n              days is {rateMedian}\n            </Paragraph>\n            <Switch\n              defaultChecked={isBuy}\n              checkedChildren=\"Buy\"\n              unCheckedChildren=\"Sell\"\n              onChange={buySellToggleChange}\n              style={{ marginBottom: 10 }}\n            />\n            <Paragraph>\n              It's {goodOrNot()} to {isBuy ? \"buy\" : \"sell\"}\n            </Paragraph>\n            <SimpleScatterChart chartData={chartData} />\n          </Space>\n        </Content>\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}